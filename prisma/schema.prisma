generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id          String        @id @default(uuid()) @db.Char(36)
  email       String        @unique
  password    String
  experiences Experiences[]
  deletedAt   DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Educations  Educations[]
  UsersSkills UsersSkills[]

  @@index([email], map: "email_users_idx")
}

model Experiences {
  id               String    @id @default(uuid()) @db.Char(36)
  userId           String    @db.Char(36)
  title            String
  employmentType   String?
  company          String
  location         String?
  locationType     String?
  startDate        DateTime
  endDate          DateTime?
  currentlyWorking Boolean   @default(false)
  description      String?   @db.LongText
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             Users              @relation(fields: [userId], references: [id])
  experienceSkills ExperienceSkills[]
}

model Skills {
  id          String    @id @default(uuid()) @db.Char(36)
  name        String    @unique
  icon        String?
  description String?
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  usersSkills      UsersSkills[]
  experienceSkills ExperienceSkills[]
}

model ExperienceSkills {
  experienceId String @db.Char(36)
  skillId      String @db.Char(36)

  experience Experiences @relation(fields: [experienceId], references: [id])
  skill      Skills      @relation(fields: [skillId], references: [id])

  @@id([experienceId, skillId])
}

model Educations {
  id                String    @id @default(uuid()) @db.Char(36)
  userId            String    @db.Char(36)
  title             String
  institution       String
  educationType     String
  startDate         DateTime
  endDate           DateTime?
  currentlyStudying Boolean   @default(false)
  description       String?   @db.LongText
  deletedAt         DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user Users @relation(fields: [userId], references: [id])
}

model UsersSkills {
  id                String      @id @default(uuid()) @db.Char(36)
  userId            String      @db.Char(36)
  skillId           String      @db.Char(36)
  level             SkillLevel
  source            SkillSource
  yearsOfExperience Float
  sourceId          String?     @db.Char(36)
  deletedAt         DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user  Users  @relation(fields: [userId], references: [id])
  skill Skills @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
  @@index([userId])
  @@index([skillId])
}

enum SkillLevel {
  EXPERT
  COMPETENT
  BEGINNER
  NO_EXPERIENCE
}

enum SkillSource {
  EXPERIENCE
  EDUCATION
  SELF_TAUGHT
}

model Multimedia {
  id         String    @id @default(uuid()) @db.Char(36)
  url        String
  key        String    @unique // S3 key
  name       String
  type       String
  size       Int
  entityId   String    @db.Char(36)
  entityType String // "experience" o "education"
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([entityId, entityType])
}
